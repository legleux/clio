name: Publish packages and Docker images
on:
  release:
    types: [published]

jobs:
  build:
    name: Build
    uses: ./.github/workflows/build.yml

  sign:
    name: Sign packages
    needs: build
    runs-on: ubuntu-20.04
    env:
      GPG_KEY_B64: ${{ secrets.GPG_KEY_B64 }}
      GPG_KEY_PASS_B64: ${{ secrets.GPG_KEY_PASS_B64 }}

    steps:
      - name: Get package artifact
        uses: actions/download-artifact@v3
        with:
          name: clio_packages

      - name: find packages
        run: find . -name "*.deb"

      - name: Install dpkg-sig
        run: |
          sudo apt-get update && sudo apt-get install -y dpkg-sig

      - name: Sign Debian packages
        uses: XRPLF/clio-gha/sign@main

      - name: Verify the signature
        run: |
          set -e
          for PKG in $(ls *.deb); do
            gpg --verify "${PKG}"
          done

      - name: Get short SHA
        id: shortsha
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

      - name: Artifact Debian package
        uses: actions/upload-artifact@v2
        with:
          name: clio-deb-packages
          path: ${{ github.workspace }}/*.deb

  push:
    name: Push to releases page
    needs:  sign
    runs-on: ubuntu-20.04
    environment:
      name: publishToRelease
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     draft: true
      #     prerelease: false

      - name: Get Clio packages
        uses: actions/download-artifact@v3
        with:
          name: clio-deb-packages

      - name: Add release assets
        uses: softprops/action-gh-release@v1
        with:
          files: "*.deb"

  publish_images:
    needs: push
    name: Publish Docker images
    uses: ./.github/workflows/publish_images.yml
    runs-on: [self-hosted, Linux]
    steps:
      - name: Get tag
        id: tag_name
        run: |
          echo "::set-output name=DOCKER_REPO::rippleci"
          SHA=${GITHUB_SHA::7}
          echo "::set-output name=SHA_SHORT::${SHA}"
          echo "::set-output name=BRANCH::${{ github.event.release.target_commitish}}" # this for on release
          TAGNAME=clio:${SHA}
          echo "::set-output name=TAGNAME::${TAGNAME}"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Test image
        run: |
          docker build . -f Dockerfile.test -t ${{ steps.tag_name.outputs.DOCKER_REPO }}/${{ github.event.repository.name }}
          docker tag ${{ steps.tag_name.outputs.DOCKER_REPO }}/${{ github.event.repository.name }} ${{ steps.tag_name.outputs.DOCKER_REPO }}/${{ github.event.repository.name }}:${{ steps.tag_name.outputs.SHA_SHORT }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PW }}

      - name: Push to Docker Hub
        run: |
          docker push ${{ steps.tag_name.outputs.DOCKER_REPO }}/${{ github.event.repository.name }}

          docker tag ${{ steps.tag_name.outputs.DOCKER_REPO }}/${{ github.event.repository.name }} ${{ steps.tag_name.outputs.DOCKER_REPO }}/${{ github.event.repository.name }}:${{ steps.tag_name.outputs.BRANCH }}
          docker push ${{ steps.tag_name.outputs.DOCKER_REPO }}/${{ github.event.repository.name }}:${{ steps.tag_name.outputs.BRANCH }}

          if [[ "${{ steps.tag_name.outputs.BRANCH }}" == "master" ]];then
            docker tag ${{ steps.tag_name.outputs.DOCKER_REPO }}/${{ github.event.repository.name }}:${{ steps.tag_name.outputs.BRANCH }} ${{ steps.tag_name.outputs.DOCKER_REPO }}/${{ github.event.repository.name }}:latest
            docker push ${{ steps.tag_name.outputs.DOCKER_REPO }}/${{ github.event.repository.name }}:latest
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to ghcr
        run: |
          docker tag ${{ github.repository_owner }}/${{ github.event.repository.name }}   ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
          docker push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
